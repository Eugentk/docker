name: Stage. CI/CD with Blue/Green Deployment
run-name: ${{ github.actor }} is running GitHub Actions ðŸš€

on:
  workflow_dispatch:
    inputs:
      software-setup:
        description: 'Setup/configure required software on EC2 instances (Optional)'
        default: false
        type: boolean
      deployment-env:
        description: 'Deployment environment'
        required: true
        default: 'blue'
        type: choice
        options:
          - blue
          - green
      git-ref:
        description: 'Git Reference (Optional. branch/commit hash)'
        required: false

    #push:
      #branches:
        #- main

env:
    DOCKER_REPOSITORY_DATADOG_URI: 574137177783.dkr.ecr.eu-west-1.amazonaws.com/devops
    ENV_FILE: ${{ secrets.SANDBOX_ENV_FILE }}
    DATADOG_API_KEY: ${{ secrets.DD_API_KEY_SANDBOX }}
    GIT_BRANCH: main

jobs:
    build:
        runs-on: ubuntu-latest
        name: Build Docker image
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                ref: ${{ env.GIT_BRANCH }}
              if: github.event.inputs.git-ref == ''

            - name: Checkout Repository (Custom Git Reference)
              uses: actions/checkout@v4
              with:
                ref: ${{ github.event.inputs.git-ref }}
              if: github.event.inputs.git-ref != ''

            - name: 'Get message'
              id: 'deploy-message'
              run: |
                    echo "::set-output name=commit_msg::$(git log -1 --format=%B)"
                    echo "::set-output name=commit_sha::$(git log -1 --format=%H)"

            - name: Slack Notification
              uses: rtCamp/action-slack-notify@v2
              env:
                SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
                SLACK_CHANNEL: deployment
                SLACK_COLOR: ${{ job.status }}
                SLACK_FOOTER: 'Powered By SellerAmp'
                SLACK_ICON_EMOJI: ':rocket:'
                SLACK_MESSAGE: ${{ steps.deploy-message.outputs.commit_msg }}
                SLACK_TITLE: 'Deploy ${{ inputs.git-ref }} to ${{ inputs.deployment-env }} by ${{ github.actor }} ðŸš€'
                SLACK_USERNAME: Deploy Started

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id:  ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: eu-west-1
          
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Copy .env file
              run: |
                cat >.env <<EOL
                ${{ env.ENV_FILE }}
                EOL
              shell: bash

            - name: Set Datadog env
              run: echo "APP_ENV=$(awk -F '=' '/APP_ENV=/{print $2}' .env)" >> $GITHUB_ENV

            - name: Set Datadog Blue Green env
              run: echo "BLUE_GREEN_ENV=$(awk -F '=' '/BLUE_GREEN_ENV=/{print $2}' .env)" >> $GITHUB_ENV

            - name: Test Datadog env
              run: echo $APP_ENV

            - name: Datadog Blue Green env
              run: echo $BLUE_GREEN_ENV

            - name: Build image with the datadog agent
              run: docker build -f ./docker/datadog/Dockerfile -t datadog --build-arg DD_API_KEY=${{ env.DATADOG_API_KEY }} --build-arg DD_ENV=${{ env.APP_ENV }} .

            - name: Push image with the datadog agent to Docker registry
              run: |
                docker tag datadog:latest ${{ env.DOCKER_REPOSITORY_DATADOG_URI }}
                docker tag ${{ env.DOCKER_REPOSITORY_DATADOG_URI }}:latest ${{ env.DOCKER_REPOSITORY_DATADOG_URI }}:blue
                docker push ${{ env.DOCKER_REPOSITORY_DATADOG_URI }}:blue

            - name: Slack Notification Success
              uses: rtCamp/action-slack-notify@v2
              if: success()
              env:
                SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
                SLACK_CHANNEL: deployment
                SLACK_COLOR: ${{ job.status }}
                SLACK_FOOTER: 'Powered By SellerAmp'
                SLACK_ICON_EMOJI: ':checkered_flag:'
                #SLACK_MESSAGE: '${{ github.event.workflow_run.head_commit.message }}'
                SLACK_TITLE: 'Deploy ${{ inputs.git-ref }} to ${{ inputs.deployment-env }} by ${{ github.actor }} ðŸš€'
                SLACK_USERNAME: 'Deploy Successfully Completed'

            - name: Slack Notification Failure
              uses: rtCamp/action-slack-notify@v2
              if: failure()
              env:
                SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
                SLACK_CHANNEL: deployment
                SLACK_COLOR: ${{ job.status }}
                SLACK_FOOTER: 'Powered By SellerAmp'
                SLACK_ICON_EMOJI: ':fire:'
                #SLACK_MESSAGE: '${{ github.event.workflow_run.head_commit.message }}'
                SLACK_TITLE: 'Deploy ${{ inputs.git-ref }} to ${{ inputs.deployment-env }} by ${{ github.actor }} ðŸš€'
                SLACK_USERNAME: 'Deploy Failure'